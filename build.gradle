plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.mycom'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Java 17 사용
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // https://mvnrepository.com/artifact/me.paulschwarz/spring-dotenv/4.0.0
    implementation 'me.paulschwarz:spring-dotenv:4.0.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database Drivers
    runtimeOnly 'com.mysql:mysql-connector-j'

    // JWT (JSON Web Token)
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Jakarta API (for Servlet and Persistence)
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2' // H2 데이터베이스 (테스트용)
}

tasks.named('test') {
    useJUnitPlatform() // JUnit5 플랫폼 사용
}

// QueryDSL 소스 생성 디렉토리 설정
def querydslDir = "$buildDir/generated/querydsl"
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", querydslDir] // QueryDSL 소스 디렉토리 추가
        }
    }
}

tasks.withType(JavaCompile) {
    options.annotationProcessorGeneratedSourcesDirectory = file("$buildDir/generated/querydsl")
}
